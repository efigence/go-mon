swagger: '2.0'
info:
  description: >-
    Monitoring/metrics API
    [docs](https://wiki.efigence.com/doku.php/architektura:monitoring)
  version: 0.0.1
  title: Monitoring/metrics API
  contact:
    email: admin@efigence.com
basePath: /_status
tags:
  - name: health
    description: Service Health
    externalDocs:
      description: Find out more
      url: 'https://wiki.efigence.com/doku.php/architektura:monitoring'
schemes:
  - http
paths:
  /health:
    get:
      tags:
        - health
      summary: Healthcheck
      description: Return service health
      operationId: healthcheck
      produces:
        - application/json
      responses:
        '200':
          description: service ok/warning
          schema:
            $ref: '#/definitions/status'
        '500':
          description: service critical
          schema:
            $ref: '#/definitions/status'
  /metrics:
    get:
      tags:
        - metrics
      summary: Application metrics
      description: Return application metrics
      operationId: metrics
      produces:
        - application/json
      responses:
        '200':
          description: app metrics
          schema:
            $ref: '#/definitions/metrics'
  /metrics/{metric}:
    get:
      tags:
        - metrics
      summary: Get single metric or metric category
      parameters:
        - name: metric
          in: path
          description: "metric name"
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: metric
          schema:
            $ref: '#/definitions/metric'


definitions:
  status:
    type: object
    required:
        - ts
        - fqdn
        - status
        - msg
    properties:
      ts:
        type: string
        format: date-time
        description: timestamp of last status update. **NOT** current time.
      fqdn:
        type: string
        description: FQDN of machine running application
        default: $local-machine.fqdn
      component:
        type: string
        description: >
            name of application component.
            `component + fqdn` should be unique, for example suffix app's name with container ID
        default: main
      status:
        type: integer
        format: uint8
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
        description: >
          current status(nagios-compatible)


          * 0 is invalid monitoring data

          * 1 for OK

          * 2 for warning - "works but might soon fail" status, like queues are
          getting full, or it is running out of disk space

          * 3 for critical - note that service should also return HTTP 500 when
          it is critical, for use with loadbalancers

          * 4 for unknown (service did not finish initializing) - will also be
          set if check is stale
      msg:
        type: string
        description: 'error description if there is any, else "OK"'
      version:
        type: string
        description: >
          currently running code version, preferably in version-short_commit
          format.

          If repo uses version tags `git describe --tags --long --always
          --dirty` should make sensible one
      parts:
        type: object
        description: >
          Sub-components of the aplication, in same format, with component name as key
        additionalProperties:
          $ref: '#/definitions/status'
    example:
      ts: 2006-01-02T15:04:05-0700
      fqdn: testhost.example.com
      component: monitorapp
      status: 2
      msg: "OK"
      version: 1.2.3-5-a4256b39
      parts:
        disk:
          ts: 2006-01-02T15:04:00-0700
          fqdn: testhost.example.com
          component: disk
          status: 2
          msg: "warning, 7% space free left"
          version: 1.2.3-5-a4256b39
        db:
          ts: 2006-01-02T15:03:22-0700
          fqdn: testhost.example.com
          component: db
          status: 1
          msg: "DB connection OK"
          version: 1.2.3-5-a4256b39



  metrics:
    type: object
    description: >
      Application metrics named hierarchically with dot(`.`) as delimiter. Should be in {app}.{component}.{subcomponent(s)}.{name} format for example:

        * `app.frontend.requests_ok`
        * `app.threadpool.db.open_connections`
        * `gc.full`

    additionalProperties:
      $ref: '#/definitions/metric'
    example:
      requests:
        type: c
        value: 123456
      open_connections:
        type: g
        value: 20
      temperature:
        type: G
        value: 24.3
  metric:
    type: object
    description: "Single metric"
    required:
        - type
        - value
    properties:
      type:
        type: "string"
        enum:
          - G
          - g
          - C
          -
        description: >-
          Single-letter metric type:
            * `G` - Gauge (float64) - current value of parameter, like "open files"
            * `g` - Gauge (int64)
            * `C` - Counter(float64) - counter, like "number of requests since boot", or "number of seconds in GC"
            * `c` - Counter(int64) - counter, like "number of requests since boot", or "number of seconds in GC"
      unit:
          type: string
          description: >-
            Unit of metric if that is not obvious from context.
            For example, `gc.count` is unit-less but `gc.time.milisecond` could be written as name: `gc.time`, unit: `milliseconds`.

            If monitoring backend doesn't support it, `unit` must be added to metric name after a dot.

            For example, if backend only expects key-value (like graphite),  `gc.time` will be converted to `gc.time.milliseconds`
      value:
        oneOf:
          - type: number
          - type: integer
    example:
      gauge:
        type: g
        value: 2001
      gauge_float:
        type: G
        value: 10.4
      counter:
        type: c
        value: 10256



externalDocs:
  description: Wiki
  url: 'https://wiki.efigence.com/doku.php/architektura:monitoring'
